{ Исходное число A(S) умножить на R по правилам S-арифметики. Целая часть
полученного числа представляет собой цифру b-1 числа А(R) . Затем, отбросив
целую часть, умножить дробную часть на R . При этом получается число, целая
часть которого есть цифра b-2 . Повторять процесс умножения l раз, пока не будут
найдены все l цифр числа A(R). }

const
     N = 0.12345678;
     MaxP = 5;
     epsMaxP = 1e-5; {требуемая точность}
     Base = 5; {основание системы}

var
     i: integer;
     r, {основание в степени -i }
     t, {основание в степени i (степень наращивается в цикле умножением на основание)}
     Num,  {исходное дробное число}
     coef,  {коэффициент перед r, который мы вычисляем для каждого слагаемого}
     outn: single; {приближённая сумма, должна быть с точностью до MaxP знаков}

begin
     Num := N;
     writeln (Num:10:5);

     outn := 0.0;

     t := 1.0;
     for i := 1 to MaxP do
     begin
          t := t * Base;
          r := 1.0 / t; {r = base^(-i)}

          Num := Num * Base; {умножаем дробную часть на основание}
          coef := Trunc(Num); {Целая часть числа есть коэффициент}
          Num := Num - coef; {отбрасываем целую часть}

          outn := outn + coef * r;

          write (coef:4:0);
     end;

     writeln;
     writeln (outn:10:6);
end.
